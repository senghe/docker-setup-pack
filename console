#!/usr/bin/env bash

function command_install()
{
    PROJECT_NAME=$1
    PROJECT_EMAIL=$2

    if [[ -e ./docker ]]; then
        echo "Removing previous version..."
        rm -Rf ./docker/*
    fi

    if [[ -z "$PROJECT_NAME" ]]; then
        echo "Project name cannot be empty"
        exit
    fi

    if [[ -z "$PROJECT_EMAIL" ]]; then
        echo "E-mail address cannot be empty"
        exit
    fi

    echo "Installing..."
    PROJECT_DIR=${PROJECT_NAME}
    BACKUP_EXTENSION=".back"

    cp -R ./docker-setup-pack/ ./docker

    # ./docker/container-fs/etc/apache2/sites-enabled/project-name.local.conf
    FILE_PATH="./docker/container-fs/etc/apache2/sites-enabled/${PROJECT_NAME}.local.conf"
    mv ./docker/container-fs/etc/apache2/sites-enabled/project-name.local.conf ${FILE_PATH}
    sed -i${BACKUP_EXTENSION} "s/@project-name@/${PROJECT_NAME}/g" ${FILE_PATH}
    sed -i${BACKUP_EXTENSION} "s/@project-email@/${PROJECT_EMAIL}/g" ${FILE_PATH}
    rm -Rf ${FILE_PATH}${BACKUP_EXTENSION}

    # ./docker/container-fs/etc/apache2/apache2.conf
    FILE_PATH="./docker/container-fs/etc/apache2/apache2.conf"
    sed -i${BACKUP_EXTENSION} "s/@project-name@/${PROJECT_NAME}/g" ${FILE_PATH}
    rm -Rf ${FILE_PATH}${BACKUP_EXTENSION}

    # ./docker/container-fs/root/init-lamp.sh
    FILE_PATH="./docker/container-fs/root/init-lamp.sh"
    sed -i${BACKUP_EXTENSION} "s/@project-name@/${PROJECT_NAME}/g" ${FILE_PATH}
    rm -Rf ${FILE_PATH}${BACKUP_EXTENSION}

    # ./docker/images/project-name/
    DIR_PATH="./docker/images/project-name/"
    mv ${DIR_PATH} "./docker/images/${PROJECT_NAME}/"

    # ./docker/images/project-name/Dockerfile
    FILE_PATH="./docker/images/${PROJECT_NAME}/Dockerfile"
    sed -i${BACKUP_EXTENSION} "s/@project-name@/${PROJECT_NAME}/g" ${FILE_PATH}
    rm -Rf ${FILE_PATH}${BACKUP_EXTENSION}

    # ./docker/docker-compose.yml
    FILE_PATH="./docker/docker-compose.yml"
    sed -i${BACKUP_EXTENSION} "s/@project-name@/${PROJECT_NAME}/g" ${FILE_PATH}
    rm -Rf ${FILE_PATH}${BACKUP_EXTENSION}

    rm -Rf ./public && mkdir ./public
    cp ./docker-setup-pack/public/index.html ./public

    # ./docker/console
    FILE_PATH="./docker/console"
    cp ./console ${FILE_PATH}
    sed -i${BACKUP_EXTENSION} "s/@project-name@/${PROJECT_NAME}/g" ${FILE_PATH}
    rm -Rf ${FILE_PATH}${BACKUP_EXTENSION}

    echo "Installation done."
}

function command_xdebug()
{
    docker exec -u root @project-name@_lamp /scripts/xdebug-switch.sh
}

function command_bash()
{
    docker exec -it -u root -e COLUMNS="`tput cols`" -e LINES="`tput lines`" -e TERM="$TERM" @project-name@_lamp /bin/bash
}

MODE=$1
[[ -z $MODE ]] || shift

if [[ ${MODE} == "install" ]]; then
    command_install "$@"
elif [[ ${MODE} == "xdebug" ]]; then
    command_xdebug "$@"
elif [[ ${MODE} == "bash" ]]; then
    command_bash "$@"
else
    echo -e "Docker Console"
    echo -e ""
    echo -e "Usage: $0 COMMAND [OPTIONS...]"
    echo -e ""
    echo -e "List of available commands:"
    echo -e "   install <project-name> <e-mail>                               - installs whole project"
    echo -e "   xdebug                                                        - starts or stops xdebug depending on its current state"
fi
